// <auto-generated />
using Abp.Authorization;
using Abp.BackgroundJobs;
using Abp.Events.Bus.Entities;
using Abp.Notifications;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using SixMan.ChiMa.Domain.Common;
using SixMan.ChiMa.Domain.Dish;
using SixMan.ChiMa.Domain.Family;
using SixMan.ChiMa.Domain.Mob;
using SixMan.ChiMa.EFCore;
using System;

namespace SixMan.ChiMa.EFCore.Migrations
{
    [DbContext(typeof(ChiMaDbContext))]
    [Migration("20180604061814_add_userInfo_address")]
    partial class add_userInfo_address
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(256);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserLinkId");

                    b.Property<string>("UserName")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(256);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte>("Result");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsAbandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime");

                    b.Property<DateTime>("NextTryTime");

                    b.Property<byte>("Priority");

                    b.Property<short>("TryCount");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ChangeTime");

                    b.Property<byte>("ChangeType");

                    b.Property<long>("EntityChangeSetId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(256);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("ExtensionData");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("Reason")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("EntityChangeId");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("TenantNotificationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLockoutEnabled");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsTwoFactorEnabled");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32);

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Common.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("LATITUDE");

                    b.Property<byte>("LEVEL");

                    b.Property<double>("LONGITUDE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int?>("Parent_Id");

                    b.Property<string>("SHORT_NAME")
                        .HasMaxLength(50);

                    b.Property<int>("SORT");

                    b.Property<bool>("STATUS");

                    b.HasKey("Id");

                    b.HasIndex("Parent_Id");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Common.Career", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Career");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Dish.Cookery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audio")
                        .HasMaxLength(512);

                    b.Property<string>("Content")
                        .HasMaxLength(4096);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<long?>("DishId");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("Order");

                    b.Property<string>("Photo")
                        .HasMaxLength(512);

                    b.Property<int?>("Time");

                    b.Property<string>("Video")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.ToTable("Cookery");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Dish.CookeryNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audio")
                        .HasMaxLength(512);

                    b.Property<long>("CookeryId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Photo")
                        .HasMaxLength(512);

                    b.Property<long>("UserInfoId");

                    b.Property<string>("Video")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("CookeryId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("CookeryNote");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Dish.Dish", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audio")
                        .HasMaxLength(512);

                    b.Property<string>("BPhoto")
                        .HasMaxLength(512);

                    b.Property<string>("CookMethod");

                    b.Property<string>("CookTime")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Difficulty")
                        .HasMaxLength(50);

                    b.Property<string>("DishCategory");

                    b.Property<string>("EnglishName");

                    b.Property<string>("ExtensionData");

                    b.Property<string>("HPhoto")
                        .HasMaxLength(512);

                    b.Property<long?>("HomeMadeUserId");

                    b.Property<string>("ImportId")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Photo")
                        .HasMaxLength(512);

                    b.Property<int?>("PreProcessTime");

                    b.Property<bool>("Public");

                    b.Property<int?>("Star");

                    b.Property<string>("Taste")
                        .HasMaxLength(256);

                    b.Property<string>("Video")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("HomeMadeUserId");

                    b.ToTable("Dish");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Dish.DishBom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<long>("DishId");

                    b.Property<string>("ExtensionData");

                    b.Property<long>("FoodMaterialId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMain");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double>("Matching");

                    b.Property<string>("MatchingDescription");

                    b.Property<int>("Order");

                    b.Property<string>("PreProcess");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("FoodMaterialId");

                    b.ToTable("DishBom");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Dish.Plan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<long>("DishId");

                    b.Property<string>("ExtensionData");

                    b.Property<long>("FamilyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MealNo");

                    b.Property<int>("MealType");

                    b.Property<DateTime>("PlanDate");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("FamilyId");

                    b.ToTable("Plan");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Family.Family", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("UUID");

                    b.HasKey("Id");

                    b.ToTable("Family");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Family.FamilyMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AvoidFoods")
                        .HasMaxLength(256);

                    b.Property<long?>("CareerId");

                    b.Property<string>("Chronic")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ExtensionData");

                    b.Property<long?>("FamilyId");

                    b.Property<int>("Height");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("NickName")
                        .HasMaxLength(50);

                    b.Property<int>("PersonKind");

                    b.Property<bool?>("Sex");

                    b.Property<long?>("UserInfoId");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("CareerId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("FamilyMember");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Family.PersonHealthAffect", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AffectDegree");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ExtensionData");

                    b.Property<long?>("FamilyMemberId");

                    b.Property<long?>("HealthConcernId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.HasIndex("FamilyMemberId");

                    b.HasIndex("HealthConcernId");

                    b.ToTable("PersonHealthAffect");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Family.UserAttention", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AttentionId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ExtensionData");

                    b.Property<long?>("FanId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.HasIndex("AttentionId");

                    b.HasIndex("FanId");

                    b.ToTable("UserAttention");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Family.UserBrowseDish", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BrowseTime");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<long?>("DishId");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("UserInfoId");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("UserBrowseDish");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Family.UserCommentDish", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<long?>("DishId");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("Rate");

                    b.Property<long?>("UserInfoId");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("UserCommentDish");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Family.UserFavoriteDish", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<long?>("DishId");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long>("UserInfoId");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("UserFavoriteDish");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Family.UserInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(256);

                    b.Property<int?>("AreaId");

                    b.Property<DateTime?>("BirthDay");

                    b.Property<long?>("CareerId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("Credits");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ExtensionData");

                    b.Property<long>("FamilyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFamilyCreater");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50);

                    b.Property<string>("NickName")
                        .HasMaxLength(50);

                    b.Property<bool?>("Sex");

                    b.Property<string>("Signature")
                        .HasMaxLength(256);

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CareerId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Food.FoodMaterial", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audio")
                        .HasMaxLength(512);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("EdiblePercent");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(50);

                    b.Property<string>("ExtensionData");

                    b.Property<long?>("FoodMaterialCategoryId");

                    b.Property<long?>("ImportId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMain");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Photo")
                        .HasMaxLength(512);

                    b.Property<double?>("Price");

                    b.Property<string>("Season")
                        .HasMaxLength(50);

                    b.Property<string>("SourceUrl")
                        .HasMaxLength(200);

                    b.Property<string>("StorageMode")
                        .HasMaxLength(256);

                    b.Property<string>("Unit")
                        .HasMaxLength(256);

                    b.Property<string>("Video")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("FoodMaterialCategoryId");

                    b.ToTable("FoodMaterial");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Food.FoodMaterialCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ExtensionData");

                    b.Property<int?>("IndexNo");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("FoodMaterialCategory");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Food.FoodMaterialHealthAffect", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AffectDegree");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ExtensionData");

                    b.Property<long?>("FoodMaterialId");

                    b.Property<long?>("HealthConcernId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.HasIndex("FoodMaterialId");

                    b.HasIndex("HealthConcernId");

                    b.ToTable("FoodMaterialHealthAffect");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Food.FoodMaterialInventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ExtensionData");

                    b.Property<long>("FamilyId");

                    b.Property<long?>("FoodMaterialId");

                    b.Property<int?>("Inventory");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("FoodMaterialId");

                    b.ToTable("FoodMaterialInventory");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Food.FoodMaterialNutrition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Content");

                    b.Property<long?>("FoodMaterialId");

                    b.Property<int?>("NutritionId");

                    b.HasKey("Id");

                    b.HasIndex("FoodMaterialId");

                    b.HasIndex("NutritionId");

                    b.ToTable("FoodMaterialNutrition");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Food.HealthConcern", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("ExtensionData");

                    b.Property<long?>("HealthConcernCategoryId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.HasIndex("HealthConcernCategoryId");

                    b.ToTable("HealthConcern");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Food.HealthConcernCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("HealthConcernCategory");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Food.Nutrition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("Unit")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Nutrition");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Food.Purchase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ExtensionData");

                    b.Property<long>("FamilyId");

                    b.Property<long?>("FoodMaterialId");

                    b.Property<bool>("HasPurchased");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("MakeTime");

                    b.Property<DateTime?>("PurchaseTime");

                    b.Property<int?>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("FoodMaterialId");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Mob.ValidateData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime>("EffectiveTime");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<int>("SendNum");

                    b.Property<string>("ValidateCode")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<int>("ValidateType");

                    b.HasKey("Id");

                    b.ToTable("ValidateData");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Price.AreaFMPrice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AreaId");

                    b.Property<DateTime>("PublishTime");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("AreaFMPrice");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Price.FMAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("FoodMaterialId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("FoodMaterialId");

                    b.ToTable("FMAlias");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Price.FMPriceItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AreaFMPriceId");

                    b.Property<long?>("FoodMaterialId");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<double>("Price");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AreaFMPriceId");

                    b.HasIndex("FoodMaterialId");

                    b.ToTable("FMPriceItem");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");


                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Authorization.Roles.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Authorization.Users.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Authorization.Users.User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Authorization.Users.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Authorization.Users.User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Authorization.Users.User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet")
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange")
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Authorization.Roles.Role", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("SixMan.ChiMa.Domain.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("SixMan.ChiMa.Domain.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Authorization.Users.User", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("SixMan.ChiMa.Domain.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("SixMan.ChiMa.Domain.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Common.Area", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Common.Area", "Parent")
                        .WithMany()
                        .HasForeignKey("Parent_Id");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Dish.Cookery", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Dish.Dish", "Dish")
                        .WithMany("Cookerys")
                        .HasForeignKey("DishId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Dish.CookeryNote", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Dish.Cookery", "Cookery")
                        .WithMany("CookeryNotes")
                        .HasForeignKey("CookeryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SixMan.ChiMa.Domain.Family.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Dish.Dish", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Family.UserInfo", "HomeMadeUser")
                        .WithMany("HomeMadeDishs")
                        .HasForeignKey("HomeMadeUserId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Dish.DishBom", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Dish.Dish", "Dish")
                        .WithMany("DishBoms")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SixMan.ChiMa.Domain.Food.FoodMaterial", "FoodMaterial")
                        .WithMany("DishBoms")
                        .HasForeignKey("FoodMaterialId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Dish.Plan", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Dish.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SixMan.ChiMa.Domain.Family.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Family.FamilyMember", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Common.Career", "Career")
                        .WithMany()
                        .HasForeignKey("CareerId");

                    b.HasOne("SixMan.ChiMa.Domain.Family.Family", "Family")
                        .WithMany("Members")
                        .HasForeignKey("FamilyId");

                    b.HasOne("SixMan.ChiMa.Domain.Family.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId");

                    b.OwnsOne("SixMan.ChiMa.Domain.Common.Range", "Age", b1 =>
                        {
                            b1.Property<long>("FamilyMemberId");

                            b1.Property<int?>("From");

                            b1.Property<int?>("To");

                            b1.ToTable("FamilyMember");

                            b1.HasOne("SixMan.ChiMa.Domain.Family.FamilyMember")
                                .WithOne("Age")
                                .HasForeignKey("SixMan.ChiMa.Domain.Common.Range", "FamilyMemberId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("SixMan.ChiMa.Domain.Common.Range", "Income", b1 =>
                        {
                            b1.Property<long?>("FamilyMemberId");

                            b1.Property<int?>("From");

                            b1.Property<int?>("To");

                            b1.ToTable("FamilyMember");

                            b1.HasOne("SixMan.ChiMa.Domain.Family.FamilyMember")
                                .WithOne("Income")
                                .HasForeignKey("SixMan.ChiMa.Domain.Common.Range", "FamilyMemberId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Family.PersonHealthAffect", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Family.FamilyMember", "FamilyMember")
                        .WithMany("FoodMaterialHealthAffects")
                        .HasForeignKey("FamilyMemberId");

                    b.HasOne("SixMan.ChiMa.Domain.Food.HealthConcern", "HealthConcern")
                        .WithMany()
                        .HasForeignKey("HealthConcernId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Family.UserAttention", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Family.UserInfo", "Attention")
                        .WithMany("Attentions")
                        .HasForeignKey("AttentionId");

                    b.HasOne("SixMan.ChiMa.Domain.Family.UserInfo", "Fan")
                        .WithMany("Fans")
                        .HasForeignKey("FanId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Family.UserBrowseDish", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Dish.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId");

                    b.HasOne("SixMan.ChiMa.Domain.Family.UserInfo", "UserInfo")
                        .WithMany("BrowseDishs")
                        .HasForeignKey("UserInfoId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Family.UserCommentDish", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Dish.Dish", "Dish")
                        .WithMany("UserComments")
                        .HasForeignKey("DishId");

                    b.HasOne("SixMan.ChiMa.Domain.Family.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Family.UserFavoriteDish", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Dish.Dish", "Dish")
                        .WithMany("UserUserFavorites")
                        .HasForeignKey("DishId");

                    b.HasOne("SixMan.ChiMa.Domain.Family.UserInfo", "UserInfo")
                        .WithMany("FavoriteDishs")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Family.UserInfo", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Common.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.HasOne("SixMan.ChiMa.Domain.Common.Career", "Career")
                        .WithMany()
                        .HasForeignKey("CareerId");

                    b.HasOne("SixMan.ChiMa.Domain.Family.Family", "Family")
                        .WithMany("UserInfos")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SixMan.ChiMa.Domain.Authorization.Users.User", "User")
                        .WithOne("UserInfo")
                        .HasForeignKey("SixMan.ChiMa.Domain.Family.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Food.FoodMaterial", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Food.FoodMaterialCategory", "FoodMaterialCategory")
                        .WithMany()
                        .HasForeignKey("FoodMaterialCategoryId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Food.FoodMaterialCategory", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Food.FoodMaterialCategory", "Parent")
                        .WithMany("Childern")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Food.FoodMaterialHealthAffect", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Food.FoodMaterial", "FoodMaterial")
                        .WithMany("FoodMaterialHealthAffects")
                        .HasForeignKey("FoodMaterialId");

                    b.HasOne("SixMan.ChiMa.Domain.Food.HealthConcern", "HealthConcern")
                        .WithMany("FoodMaterialHealthAffects")
                        .HasForeignKey("HealthConcernId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Food.FoodMaterialInventory", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Family.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SixMan.ChiMa.Domain.Food.FoodMaterial", "FoodMaterial")
                        .WithMany()
                        .HasForeignKey("FoodMaterialId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Food.FoodMaterialNutrition", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Food.FoodMaterial", "FoodMaterial")
                        .WithMany("FoodMaterialNutritions")
                        .HasForeignKey("FoodMaterialId");

                    b.HasOne("SixMan.ChiMa.Domain.Food.Nutrition", "Nutrition")
                        .WithMany()
                        .HasForeignKey("NutritionId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Food.HealthConcern", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Food.HealthConcernCategory", "HealthConcernCategory")
                        .WithMany()
                        .HasForeignKey("HealthConcernCategoryId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Food.Purchase", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Family.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SixMan.ChiMa.Domain.Food.FoodMaterial", "FoodMaterial")
                        .WithMany()
                        .HasForeignKey("FoodMaterialId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("SixMan.ChiMa.Domain.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("SixMan.ChiMa.Domain.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Price.AreaFMPrice", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Common.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Price.FMAlias", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Food.FoodMaterial", "FoodMaterial")
                        .WithMany()
                        .HasForeignKey("FoodMaterialId");
                });

            modelBuilder.Entity("SixMan.ChiMa.Domain.Price.FMPriceItem", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Price.AreaFMPrice", "AreaFMPrice")
                        .WithMany("FMPriceItems")
                        .HasForeignKey("AreaFMPriceId");

                    b.HasOne("SixMan.ChiMa.Domain.Food.FoodMaterial", "FoodMaterial")
                        .WithMany()
                        .HasForeignKey("FoodMaterialId");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Authorization.Roles.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("SixMan.ChiMa.Domain.Authorization.Users.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
